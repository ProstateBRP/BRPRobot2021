clc;
clear;

%Initialzation and setup for parameters
server = Server('simulation', true);
server.connect();
calibration_finsh_flag = false;
planning_finsh_flag = false;
targeting_finsh_flag = false;
target_not_reachable = false;
idle_flag = false;
command_recieved = false;
% Must determine control type!
open_loop = false;
%Robot setup and bring up
robot_not_ready = server.robot.is_startup();
robot_mode = server.robot.check_robot_mode();
robot_pose = server.robot.get_robot_current_pose();     

% Todo: add parral robot state sender in state changing phase?

%The main function loop; Missing a robot state update server thread.
while true
    if ~idle_flag && ~command_recieved
        [name, state] = server.receiver.readCommandMessage();

    end
    %
    switch state
        case "START_UP"
            disp('Initialization');
            start_up_count = 0;
            server.sender.WriteOpenIGTLinkStringMessage(char("ACK_"+string(int64(posixtime(datetime('now'))))), char(state));
            while robot_not_ready
                % Start up the robot
                server.robot.startup();
                start_up_count = start_up_count + 1;
                pause(0.2);
                robot_not_ready = server.robot.is_startup();
                % robot_pose = get_robot_current_pose();

                %if it's started or not, wait for it to start up
                if robot_not_ready
                    status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                    server.robot.startup();
                    start_up_count = start_up_count + 1;
                else
                    status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'START_UP');
                    idle_flag = true;
                    state = "IDLE";
                    command_recieved = false;
                    % server.robot.set_robot_mode('idle');
                end
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                %should not send any transform, here is the reason, if it's
                %not start up, it won't answer robot_pose command. If it
                %starts up, the loop would exit to idle, which would have
                %robot_pose server.
                if start_up_count >= 100 && robot_not_ready
                    error_message = "Start up fail, check robot status";
                    disp(error_message);
                    server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                    break;
                end
            end   
            
        case "CALIBRATION"
            disp('Calibration');
            %First Check if robot has started up
            set_mode_count = 0;
            fail_flag = false;
            if ~robot_not_ready
                server.sender.WriteOpenIGTLinkStringMessage(char("ACK_"+string(int64(posixtime(datetime('now'))))), char(state));
                % Set the robot into calibration mode
                while ~strcmp(robot_mode, 'calibration')
                    %try to set the robot mode in calibration and check the
                    %mode again

                    % server.robot.set_robot_mode('calibration');
                    set_mode_count = set_mode_count + 1;
                    pause(0.2);
                    % robot_mode = server.robot.check_robot_mdoe();
                    
                    if ~strcmp(robot_mode, 'calibration')
                        status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                        % server.robot.set_robot_mode('calibration');
                        set_mode_count = set_mode_count + 1;
                    else
                        status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                    end
                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                    % server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose); 
                    % should also send after request, need threading.
                    if set_mode_count >= 100 && ~strcmp(robot_mode, 'calibration')
                        error_message = "Start Calibration fail, check robot status, back to IDLE.";
                        disp(error_message);
                        server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        fail_flag = true;
                        break;
                    end
                end
                if ~fail_flag
                    % pose_server = parfeval(backgroundPool, @server.robot_postion_server, 0);
                    while ~calibration_finsh_flag
                        [name, type, data] = server.receiver.readMessage();
                        if strcmpi(type, 'STRING')
                            if strcmpi(data, 'GET_TRANSFORM')
                                % robot_pose = server.robot.get_robot_current_pose();
                                % server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                                pause(0.2);
                            else
                                error_message = "Wrong command at this time.";
                                server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                            end
                        elseif strcmpi(type, 'TRANSFORM')
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char("ACK_TRANSFORM"));
                            % calibration_finsh_flag = server.robot.calibrate(data);
                            pause(0.2);
                            if ~calibration_finsh_flag
                                status = struct('code', 10, 'subCode', 0, 'errorName', "Configuration error", 'message', "STATUS_CONFIG_ERROR");
                                %break
                            else
                                status = struct('code', 1, 'subCode', 0, 'errorName', "none", 'message', "STATUS_OK");
                            end
                            server.sender.WriteOpenIGTLinkStatusMessage(char(name), status); 
                        else
                            error_message = "Wrong command at this time.";
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        end
                    end
                    % cancel(pose_server);
                end
            %Get into calibration without starting the robot should not be
            %accepted?
            else
                error_message = 'Robot not start up, intialize the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            end
            idle_flag = true;
            command_recieved = false;
            state = "IDLE";
            % server.robot.set_robot_mode('idle');

        case "PLANNING"
            disp('Planning');
            set_mode_count = 0;
            fail_flag = false;
            if ~robot_not_ready && calibration_finsh_flag
                server.sender.WriteOpenIGTLinkStringMessage(char("ACK_"+string(int64(posixtime(datetime('now'))))), char(state));
                % Set the robot into calibration mode
                while ~strcmp(robot_mode, 'planning')
                    %try to set the robot mode in planning and check the
                    %mode again

                    % server.robot.set_robot_mode('planning');
                    set_mode_count = set_mode_count + 1;
                    pause(0.2);
                    % robot_mode = server.robot.check_robot_mdoe();
                    
                    if ~strcmp(robot_mode, 'planning')
                        status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                        % server.robot.set_robot_mode('planning');
                        set_mode_count = set_mode_count + 1;
                    else
                        status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                    end
                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                    % server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose); 
                    % should also send after request, need threading.
                    if set_mode_count >= 100 && ~strcmp(robot_mode, 'planning')
                        error_message = "Start planning fail, check robot status";
                        disp(error_message);
                        server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        fail_flag = true;
                        break;
                    end
                end
                if ~fail_flag
                    % pose_server = parfeval(backgroundPool, @server.robot_postion_server, 0);
                    while ~planning_finsh_flag
                        [name, type, data] = server.receiver.readMessage();
                        if strcmpi(type, 'STRING')
                            if strcmpi(data, 'GET_TRANSFORM')
                                % robot_pose = server.robot.get_robot_current_pose();
                                server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                                pause(0.2);
                            else
                                error_message = "Wrong command at this time.";
                                server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                            end
                        elseif strcmpi(type, 'TRANSFORM')
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char("ACK_TRANSFORM"));
                            % planning_finsh_flag = server.robot.planning(data);
                            pause(0.2);
                            if ~planning_finsh_flag
                                status = struct('code', 10, 'subCode', 0, 'errorName', 'Configuration error', 'message', 'STATUS_CONFIG_ERROR');
                                %break
                            else
                                status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                            end
                            server.sender.WriteOpenIGTLinkStatusMessage(char(name), status); 
                        else
                            error_message = "Wrong type of message at this time.";
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        end
                    end
                    % cancel(pose_server);
                end
            %Get into calibration without starting the robot
            elseif robot_not_ready
                error_message = 'Robot not start up, intialize the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            elseif ~calibration_finsh_flag
                error_message = 'Robot not calibrated, calibrate the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            end
            idle_flag = True;
            state = "IDLE";
            command_recieved = false;
            % server.robot.set_robot_mode('idle');

        case "TARGETING"
            %Should we block targeting if not planned? What's the
            %difference between planning and targeting?
            disp('Targeting');
            set_mode_count = 0;
            fail_flag = false;
            if ~robot_not_ready && calibration_finsh_flag
                server.sender.WriteOpenIGTLinkStringMessage(char("ACK_"+string(int64(posixtime(datetime('now'))))), char(state));
                % Set the robot into targeting mode
                while ~strcmp(robot_mode, 'targeting')
                    %try to set the robot mode in calibration and check the
                    %mode again

                    % server.robot.set_robot_mode('targeting');
                    set_mode_count = set_mode_count + 1;
                    pause(0.2);
                    % robot_mode = server.robot.check_robot_mdoe();
                    
                    if ~strcmp(robot_mode, 'targeting')
                        status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                        % server.robot.set_robot_mode('targeting');
                        set_mode_count = set_mode_count + 1;
                    else
                        status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                    end
                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                    % server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose); 
                    % should also send after request, need threading.
                    if set_mode_count >= 100 && ~strcmp(robot_mode, 'targeting')
                        error_message = "Start targeting fail, check robot status";
                        disp(error_message);
                        server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        fail_flag = true;
                        break;
                    end
                end
                if ~fail_flag
                    % pose_server = parfeval(backgroundPool, @server.robot_postion_server, 0);
                    while ~targeting_finsh_flag
                        [name, type, data] = server.receiver.readMessage();
                        if strcmpi(type, 'STRING')
                            if strcmpi(data, 'GET_TRANSFORM')
                                % robot_pose = server.robot.get_robot_current_pose();
                                server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                                pause(0.2);
                            else
                                error_message = "Wrong command at this time.";
                                server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                            end
                        elseif strcmpi(type, 'TRANSFORM')
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char("ACK_TRANSFORM"));
                            % is_in_workspace = server.robot.check_target(data);
                            pause(0.1);
                            if ~is_in_workspace
                                status = struct('code', 10, 'subCode', 0, 'errorName', 'Configuration error', 'message', 'STATUS_CONFIG_ERROR');
                                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                                %break
                            else
                                status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                                targeting_finsh_flag = true;
                            end                           
                        else
                            error_message = "Wrong type of message at this time.";
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        end
                    end
                    % cancel(pose_server);
                end
            %Get into calibration without starting the robot
            elseif robot_not_ready
                error_message = 'Robot not start up, intialize the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            elseif ~calibration_finsh_flag
                error_message = 'Robot not calibrated, calibrate the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            end
            idle_flag = True;
            state = "IDLE";
            command_recieved = false;
            % server.robot.set_robot_mode('idle');

        case "IDLE"
            disp('Idle');
            if ~robot_not_ready
                while idle_flag
                    [name, type, data] = server.receiver.readMessage();
                    if strcmpi(type, 'STRING')
                        if strcmpi(data, 'GET_TRANSFORM')
                            % robot_pose = server.robot.get_robot_current_pose();
                            server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                            pause(0.2);
                        elseif ismember(data, server.validCommands)
                            msg = "Exiting idle mode, and getting into " + data + "mode.";
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(msg));
                            idle_flag = false;
                            command_recieved = true;
                            break
                        else
                            error_message = "Unknown Command, Please check.";
                            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        end
                    else
                        error_message = "Wrong command at this time.";
                        server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                    end
                end
            else
                error_message = 'Robot not start up, intialize the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                idle_flag = false;
                command_recieved = false;
            end
        case "MOVE_TO_TARGET"
            disp('Scan & Move');
            set_mode_count = 0;
            fail_flag = false;
            if ~robot_not_ready && calibration_finsh_flag && targeting_finsh_flag
                server.sender.WriteOpenIGTLinkStringMessage(char("ACK_"+string(int64(posixtime(datetime('now'))))), char(state));
                % Set the robot into calibration mode
                while ~strcmp(robot_mode, 'move_to_goal')
                    %try to set the robot mode in calibration and check the
                    %mode again

                    % server.robot.set_robot_mode('move_to_goal');
                    set_mode_count = set_mode_count + 1;
                    pause(0.2);
                    % robot_mode = server.robot.check_robot_mdoe();
                    
                    if ~strcmp(robot_mode, 'move_to_goal')
                        status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                        % server.robot.set_robot_mode('move_to_goal');
                        set_mode_count = set_mode_count + 1;
                    else
                        status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                    end
                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                     % robot_pose = server.robot.get_robot_current_pose();
                    server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                    pause(0.2); 
                    % should also send after request, need threading.
                    if set_mode_count >= 100 && ~strcmp(robot_mode, 'move_to_goal')
                        error_message = "Start moving fail, check robot status";
                        disp(error_message);
                        server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                        fail_flag = true;
                        break;
                    end
                end
                if ~fail_flag
                    final_targeting_reached = false;
                    first_step_flag = true;
                    while ~final_targeting_reached
                        if open_loop
                            % server.robot.move_to_end();
                            break
                        else
                            [name, type, data] = server.receiver.readMessage();
                            if strcmpi(type, 'STRING')
                                if strcmpi(data, 'CURRENT_POSITION')
                                    % robot_pose = server.robot.get_robot_current_pose();
                                    server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                                    pause(0.2);
                                else
                                    error_message = "Wrong command at this time.";
                                    server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                                end
                            elseif strcmpi(type, 'TRANSFORM')
                                server.sender.WriteOpenIGTLinkStringMessage(char(name), char("ACK_NPSOE"));
                                pause(0.1);
                                if ~is_in_workspace
                                    status = struct('code', 10, 'subCode', 0, 'errorName', 'Configuration error', 'message', 'STATUS_CONFIG_ERROR');
                                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                                    break
                                else
                                    if first_step_flag
                                        server.robot.set_entry_point(data);
                                        first_step_flag = false;
                                    end
                                    status = struct('code', 1, 'subCode', 0, 'errorName', 'none', 'message', 'STATUS_OK');
                                    server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
                                    % server.robot.move_A_step(data);
                                    % robot_pose = server.robot.get_robot_current_pose();
                                    server.sender.WriteOpenIGTLinkTransformMessage(char(name), robot_pose);
                                    % final_targeting_reached = server.robot.is_target_reached;
                                    pause(0.1);
                                end                           
                            else
                                error_message = "Wrong type of message at this time.";
                                server.sender.WriteOpenIGTLinkStringMessage(char(name), char(error_message));
                            end
                        end
                    end
                    if final_targeting_reached
                        msg = "Reached Final target.";
                    else
                        msg = "Target not reachable anymore.";
                    end
                    server.sender.WriteOpenIGTLinkStringMessage(char(name), char(msg));

                end
            %Get into calibration without starting the robot
            elseif robot_not_ready
                error_message = 'Robot not start up, intialize the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            elseif ~calibration_finsh_flag
                error_message = 'Robot not calibrated, calibrate the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            elseif ~targeting_finsh_flag
                error_message = 'No target recieved, finish targeting the robot first!';
                disp(error_message);
                server.sender.WriteOpenIGTLinkStringMessage(char(name), error_message);
                status = struct('code', 13, 'subCode', 0, 'errorName', 'Device not ready', 'message', 'STATUS_NOT_READY');
                server.sender.WriteOpenIGTLinkStatusMessage(char(name), status);
            end
            idle_flag = True;
            state = "IDLE";
            command_recieved = false;
        case "STOP"
            disp("Stop the robot and communication");
            % server.robot.stop();
            % server.disconnect();
            msg = "Robot stopped and disconnected, stopping the communication...";
            server.sender.WriteOpenIGTLinkStringMessage(char(name), char(msg));
            server.disconnect()
            break
    end
        

end